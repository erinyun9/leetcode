Binary Tree Postorder Traversal 

Given a binary tree, return the postorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [3,2,1].

Note: Recursive solution is trivial, could you do it iteratively?

=====
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode *root) {
        //stack method
        /*vector<int> result;
        stack<TreeNode*> s;
        TreeNode *pre, *cur;
        pre = nullptr;
        cur = root;
        while(cur!=nullptr || !s.empty()){
            if(cur!=nullptr){
                s.push(cur);
                cur = cur->left;
            }else{
                TreeNode* n = s.top();
                if(n->right!=nullptr && pre!= n->right)
                    cur = n->right;
                else{
                    s.pop();
                    result.push_back(n->val);
                    pre = n;
                }
            }
        }  
        return result;*/
        
    }
};
