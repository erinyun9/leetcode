Flatten Binary Tree to Linked List Total 

Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
click to show hints.

Hints:
If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode *root) {
        if(root==nullptr) return;
        stack<TreeNode*> s;
        TreeNode *n;
        s.push(root);
        while(!s.empty())
        {
            n = s.top();
            s.pop();
            if(n->right != nullptr) 
            {
                s.push(n->right);
            }
            if(n->left != nullptr)
            {
                s.push(n->left);
            }
            n->left = nullptr;
            if(!s.empty())
            {
                n->right = s.top();
            }
        }
        
        
        
    }
};